

USE ROLE SBX_EA_GENERAL_FR;
USE DATABASE SBX_PSAS_DB;
USE SCHEMA ANALYTICS;
USE WAREHOUSE SBX_EA_GENERAL_FR_WH;

--SHOW TASKS LIKE 'TSK_KEVIN_B_CPH_FY24_RVM%'
--DESC TASK TSK_KEVIN_B_CPH_FY24_RVM
-- select *  from table(SBX_PSAS_DB.INFORMATION_SCHEMA.task_history(
--     scheduled_time_range_start=>dateadd('hour',-24,current_timestamp()),
--     result_limit => 10,
--     task_name=>'TSK_KEVIN_B_CPH_FY24_RVM'));
    
--alter task TSK_KEVIN_B_CPH_FY24_RVM resume; --It was by default suspended  ( run this command Only first time since by default its suspended)
--execute task TSK_KEVIN_B_CPH_FY24_RVM

--TASK
CREATE OR REPLACE TASK TSK_KEVIN_B_CPH_FY24_RVM

WAREHOUSE = SBX_EA_GENERAL_FR_WH
SCHEDULE = 'USING CRON 50 6 3 1-12 * America/Chicago' -- 6:50 AM 3rd day of every month
TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
AS

-------------
CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.CPH_FY24_RVM AS

--REAR VIEW MIRROR FY23 SCRIPT


--IDENTIFY OPPORTUNITIES
CREATE OR REPLACE TEMPORARY TABLE OPP AS
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION

SELECT      OPPORTUNITY_ID,
            CLOSEDATE AS CLOSE_DT,
            PAIDPAYEE AS PAYEE_ID,
            PAIDPAYEENAME AS PAYEE_NAME,
            PAYEETYPE AS PAYEE_TYPE,
            SPLITPCT AS SPLIT_PCT,
            ESTTOTALPOINTS AS EST_TOTAL_POINTS
FROM        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_COMP_REQUEST_VERIFICATION
WHERE       COMPONENT_ID = 'CR ADVANCE PART I'
AND         SIGNINGTYPE = 'NEW BUSINESS'
AND         PART1STATUS = 'APPROVED'
AND         TO_DATE(CLOSEDATE) >= '04/01/2023' --FY24 ONLY
AND         TO_DATE(CLOSEDATE) <= '03/31/2024' --FY24 ONLY
GROUP BY    OPPORTUNITY_ID,
            CLOSEDATE,
            PAIDPAYEE,
            PAIDPAYEENAME,
            PAYEETYPE,
            SPLITPCT,
            ESTTOTALPOINTS;



--IDENTIFY ACCOUNTS ASSOCIATED WITH OPPORTUNITIES
CREATE OR REPLACE TEMPORARY TABLE  OPP_ACCT AS 
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_OPPORTUNITY_ACCOUNTS

SELECT      OPP.OPPORTUNITY_ID,
            CLOSE_DT,
            PAYEE_ID,
            PAYEE_NAME,
            PAYEE_TYPE,
            SPLIT_PCT,
            ACCOUNT_ID,
            ACCOUNT_NAME,
            EST_TOTAL_POINTS,
            PART1APPROVEDATE,
            PART1STATUS
FROM        OPP
JOIN        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_OPPORTUNITY_ACCOUNTS
ON          OPP.OPPORTUNITY_ID = V_PE_OPPORTUNITY_ACCOUNTS.OPPORTUNITY_ID
GROUP BY    OPP.OPPORTUNITY_ID,
            CLOSE_DT,
            PAYEE_ID,
            PAYEE_NAME,
            PAYEE_TYPE,
            SPLIT_PCT,
            ACCOUNT_ID,
            ACCOUNT_NAME,
            EST_TOTAL_POINTS,
            PART1APPROVEDATE,
            PART1STATUS;


--ADD GP ACTUAL + SPLITS TO OPP ACCT LIST
CREATE OR REPLACE TEMPORARY TABLE  OPP_ACT AS 
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT_ACTUAL

SELECT      OPP_ACCT.OPPORTUNITY_ID,
            OPP_ACCT.CLOSE_DT,
            OPP_ACCT.PAYEE_ID,
            OPP_ACCT.PAYEE_NAME,
            OPP_ACCT.PAYEE_TYPE,
            OPP_ACCT.ACCOUNT_ID,
            OPP_ACCT.ACCOUNT_NAME,
            OPP_ACCT.PART1APPROVEDATE,
            OPP_ACCT.PART1STATUS,
            CALENDAR_MONTH AS PERIOD,
            OPP_ACCT.SPLIT_PCT,
            OPP_ACCT.EST_TOTAL_POINTS,
            (OPP_ACCT.EST_TOTAL_POINTS * SPLIT_PCT) AS EST_TOTAL_POINTS_ADJ,
            SUM(GROSS_PROFIT_ACTUALS) AS GROSS_PROFIT_ACT,
            SUM(GROSS_PROFIT_ACTUALS * SPLIT_PCT) AS GROSS_PROFIT_ACT_ADJ,
            SUM(NET_REVENUE) AS NET_REVENUE_ACT,
            SUM(NET_REVENUE * SPLIT_PCT) AS NET_REVENUE_ACT_ADJ
FROM        OPP_ACCT
JOIN        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_GROSS_PROFIT_ACTUAL
ON          OPP_ACCT.ACCOUNT_ID = V_PE_GROSS_PROFIT_ACTUAL.ACCOUNT_ID
WHERE       MARKET_SEGMENT = 'Retail'
GROUP BY    OPP_ACCT.OPPORTUNITY_ID,
            OPP_ACCT.CLOSE_DT,
            OPP_ACCT.PAYEE_ID,
            OPP_ACCT.PAYEE_NAME,
            OPP_ACCT.PAYEE_TYPE,
            OPP_ACCT.ACCOUNT_ID,
            OPP_ACCT.ACCOUNT_NAME,
            OPP_ACCT.PART1APPROVEDATE,
            OPP_ACCT.PART1STATUS,
            CALENDAR_MONTH,
            OPP_ACCT.SPLIT_PCT,
            OPP_ACCT.EST_TOTAL_POINTS,
            (OPP_ACCT.EST_TOTAL_POINTS * SPLIT_PCT);


--PAYEE ELGIBILITY
CREATE OR REPLACE TEMPORARY TABLE  ELIG AS 
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT

SELECT      OPP.PAYEE_ID,
            OPP.PAYEE_NAME,
            COMPPLANID AS COMP_PLAN_ID,
            EFFECTIVE_START,
            EFFECTIVE_END
FROM        OPP
JOIN        DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_PAYEE_PLAN_ASSIGNMENT
ON          OPP.PAYEE_ID = V_PE_PAYEE_PLAN_ASSIGNMENT.PAYEEID
AND         V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID NOT LIKE '%MHS%'
AND         V_PE_PAYEE_PLAN_ASSIGNMENT.EFFECTIVE_END >= '2023-04-01'
AND         V_PE_PAYEE_PLAN_ASSIGNMENT.COMPPLANID NOT LIKE 'USP_RETAIL_SM'
--AND         V_PE_PAYEE_PLAN_ASSIGNMENT.VPS_NAME NOT LIKE 'VPS NOT FOUND'
GROUP BY    OPP.PAYEE_ID,
            OPP.PAYEE_NAME,
            COMPPLANID,
            EFFECTIVE_START,
            EFFECTIVE_END;


--PAYEE ELGIBILITY
CREATE OR REPLACE TEMPORARY TABLE  HIERARCHY_PREP AS 
--SELECT TOP 10 * FROM DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT 

SELECT      ELIG.PAYEE_ID,
            ELIG.PAYEE_NAME,
            ELIG.COMP_PLAN_ID,
            EFFECTIVE_START,
            EFFECTIVE_END,
            FILTER.AVP_ID,
            FILTER.AVP_NAME,
            FILTER.AVP_TITLE,
            FILTER.VPS_ID,
            FILTER.VPS_NAME
FROM        ELIG
LEFT JOIN   DEV_ENT_PL_DATALAKE_DB.VARICENT.V_PE_FILTER_DATA_NO_ACCT FILTER
ON          ELIG.PAYEE_ID = FILTER.REP_ID
WHERE       (ELIG.COMP_PLAN_ID = 'USP_RSM'
OR          ELIG.COMP_PLAN_ID = 'USP_COMBO')
AND         AVP_BUSN_TITLE NOT LIKE '%Health Systems%'
AND         FILTER.PERIOD < '2025 01 APR'
GROUP BY    ELIG.PAYEE_ID,
            ELIG.PAYEE_NAME,
            ELIG.COMP_PLAN_ID,
            EFFECTIVE_START,
            EFFECTIVE_END,
            FILTER.AVP_ID,
            FILTER.AVP_NAME,
            FILTER.AVP_TITLE,
            FILTER.VPS_ID,
            FILTER.VPS_NAME;

--UPDATE TO CLEAN-UP VPS NOT FOUND
UPDATE   HIERARCHY_PREP
SET      AVP_ID =  '999999', AVP_NAME = 'Unassigned', AVP_TITLE = 'Vice President, Field Sales', VPS_ID = '999999', VPS_NAME = 'Unassigned'
WHERE    VPS_NAME = 'VPS NOT FOUND';
            

CREATE OR REPLACE TEMPORARY TABLE HIERARCHY AS 


CREATE OR REPLACE TABLE SBX_PSAS_DB.SALES_OPS_GOV.CPH_FY24_RVM AS

SELECT      OPP_ACT.*,
            HIERARCHY.COMP_PLAN_ID,
            HIERARCHY.EFFECTIVE_START,
            HIERARCHY.EFFECTIVE_END,
            HIERARCHY.AVP_ID,
            HIERARCHY.AVP_NAME,
            HIERARCHY.AVP_TITLE,
            HIERARCHY.VPS_ID,
            HIERARCHY.VPS_NAME
FROM        OPP_ACT
LEFT JOIN   HIERARCHY
ON          OPP_ACT.PAYEE_ID = HIERARCHY.PAYEE_ID
WHERE       HIERARCHY.COMP_PLAN_ID IS NOT NULL
AND         OPP_ACT.CLOSE_DT BETWEEN HIERARCHY.EFFECTIVE_START AND HIERARCHY.EFFECTIVE_END
